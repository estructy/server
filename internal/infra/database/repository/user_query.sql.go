// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, auth_id, name, email) VALUES ($1, $2, $3, $4) RETURNING user_id
`

type CreateUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	AuthID string    `json:"auth_id"`
	Name   string    `json:"name"`
	Email  string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.AuthID,
		arg.Name,
		arg.Email,
	)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const getUserByAuthID = `-- name: GetUserByAuthID :one
SELECT user_id FROM users WHERE auth_id = $1
`

func (q *Queries) GetUserByAuthID(ctx context.Context, authID string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByAuthID, authID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
SELECT EXISTS (
		SELECT 1 FROM users WHERE email = $1
) AS exists
`

func (q *Queries) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
