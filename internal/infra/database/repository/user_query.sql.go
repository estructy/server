// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_query.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (user_id, auth_id, name, email) VALUES ($1, $2, $3, $4) RETURNING user_id
`

type CreateUserParams struct {
	UserID uuid.UUID `json:"user_id"`
	AuthID string    `json:"auth_id"`
	Name   string    `json:"name"`
	Email  string    `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.UserID,
		arg.AuthID,
		arg.Name,
		arg.Email,
	)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const findUserLastAccessedAccount = `-- name: FindUserLastAccessedAccount :one
SELECT last_accessed_account FROM users WHERE user_id = $1
`

func (q *Queries) FindUserLastAccessedAccount(ctx context.Context, userID uuid.UUID) (*uuid.UUID, error) {
	row := q.db.QueryRow(ctx, findUserLastAccessedAccount, userID)
	var last_accessed_account *uuid.UUID
	err := row.Scan(&last_accessed_account)
	return last_accessed_account, err
}

const getUserByAuthID = `-- name: GetUserByAuthID :one
SELECT user_id FROM users WHERE auth_id = $1
`

func (q *Queries) GetUserByAuthID(ctx context.Context, authID string) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, getUserByAuthID, authID)
	var user_id uuid.UUID
	err := row.Scan(&user_id)
	return user_id, err
}

const updateUserLastAccessedAccount = `-- name: UpdateUserLastAccessedAccount :exec
UPDATE users SET last_accessed_account = $2 WHERE user_id = $1
`

type UpdateUserLastAccessedAccountParams struct {
	UserID              uuid.UUID  `json:"user_id"`
	LastAccessedAccount *uuid.UUID `json:"last_accessed_account"`
}

func (q *Queries) UpdateUserLastAccessedAccount(ctx context.Context, arg UpdateUserLastAccessedAccountParams) error {
	_, err := q.db.Exec(ctx, updateUserLastAccessedAccount, arg.UserID, arg.LastAccessedAccount)
	return err
}

const updateUserName = `-- name: UpdateUserName :exec
UPDATE users SET name = $2 WHERE user_id = $1
`

type UpdateUserNameParams struct {
	UserID uuid.UUID `json:"user_id"`
	Name   string    `json:"name"`
}

func (q *Queries) UpdateUserName(ctx context.Context, arg UpdateUserNameParams) error {
	_, err := q.db.Exec(ctx, updateUserName, arg.UserID, arg.Name)
	return err
}

const userExistsByEmail = `-- name: UserExistsByEmail :one
SELECT EXISTS (
		SELECT 1 FROM users WHERE email = $1
) AS exists
`

func (q *Queries) UserExistsByEmail(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRow(ctx, userExistsByEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
